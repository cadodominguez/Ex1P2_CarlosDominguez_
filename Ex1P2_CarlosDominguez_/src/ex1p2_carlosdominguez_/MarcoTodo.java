/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ex1p2_carlosdominguez_;

import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author USUARIO
 */
public class MarcoTodo extends javax.swing.JFrame {
    static int index_global = -1;
    static ArrayList <Home> Usuarios = new ArrayList();
    public MarcoTodo() {
        Usuarios.add(new Home("Onasis"));
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Consola = new javax.swing.JTextArea();
        Comando = new javax.swing.JTextField();
        BEnter = new javax.swing.JButton();
        Directorios = new javax.swing.JComboBox<>();
        Visualize = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Root = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        Consola.setEditable(false);
        Consola.setBackground(new java.awt.Color(204, 204, 204));
        Consola.setColumns(20);
        Consola.setForeground(new java.awt.Color(0, 0, 0));
        Consola.setRows(5);
        Consola.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane1.setViewportView(Consola);

        BEnter.setBackground(new java.awt.Color(0, 204, 255));
        BEnter.setForeground(new java.awt.Color(0, 0, 0));
        BEnter.setText("Enter");
        BEnter.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BEnterActionPerformed(evt);
            }
        });

        Directorios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Home", " " }));

        Visualize.setBackground(new java.awt.Color(255, 153, 153));
        Visualize.setForeground(new java.awt.Color(0, 0, 0));
        Visualize.setText("Visualisar");
        Visualize.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel2.setBackground(new java.awt.Color(0, 204, 255));
        jPanel2.setForeground(new java.awt.Color(0, 0, 0));

        Root.setForeground(new java.awt.Color(0, 0, 0));
        Root.setText("> Root");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Root, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Root, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Comando, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Directorios, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BEnter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Visualize, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Comando, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BEnter))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Visualize)
                    .addComponent(Directorios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BEnterActionPerformed
        
        String comando = Comando.getText();
        String [] piezas_comando = comando.split(" ");
        
        if (comando.equalsIgnoreCase("Is")) {
            if (Root.getText().equalsIgnoreCase(">Root")) {
                Consola.append(">>Necesita logearse en una Usuario para usar este comando"+"\n");
            }else{
                Consola.append("Is"+"\n");
                DefaultComboBoxModel ComboBox = (DefaultComboBoxModel) Directorios.getModel();
                String nombre = Root.getText().replace(">", "");
                for (int i = 0; i < Usuarios.size(); i++) {
                    if (Usuarios.get(i).getNombre().equalsIgnoreCase(nombre)) {
                    index_global = i;
                    for (int j = 0; j < Usuarios.get(i).getArchivoYDirectorios().size(); j++) {
                        ComboBox.addElement(Usuarios.get(i).getArchivoYDirectorios().get(j));
                        Consola.append(">>"+Usuarios.get(i).getArchivoYDirectorios().get(j).toString()+"\n");
                    }
                }
            }
            Directorios.setModel(ComboBox);
            }
        }else if (comando.equalsIgnoreCase("clear")) {
            Consola.setText("");
            Consola.append("clear"+"\n");
        }else if (comando.contains("mkdir")) {
            if (piezas_comando.length >= 2) {
                Home actual = Usuarios.get(index_global);
                ArrayList <Creacion> temp = actual.getArchivoYDirectorios();
                if (comando.contains(".file")) {
                    temp.add(new File(piezas_comando[1]));
                }else{
                    temp.add(new Directorio(piezas_comando[1]));
                }
                if (existe_arc(piezas_comando[1],temp)) {
                    Consola.append(">>El Archivo ya existe"+"\n");
                }else{
                    actual.setArchivoYDirectorios(temp);
                    Usuarios.set(index_global, actual);
                    Consola.append(comando+"\n");
                }
            }else{
                Consola.append(">>Comando ingresado Incorrectamente"+"\n");
            }
        }else if (comando.contains("rm")) {
            if (piezas_comando.length >= 2) {
                Home actual = Usuarios.get(index_global);
                ArrayList <Creacion> temp = actual.getArchivoYDirectorios();
                int index = index_rm(piezas_comando[1],temp);
                if (index == -1) {
                    Consola.append(">>El Archivo ya existe"+"\n");
                }else{
                    temp.remove(index);
                    actual.setArchivoYDirectorios(temp);
                    Usuarios.set(index_global, actual);
                    Consola.append(comando+"\n");
                    llenado_comboBox();
                }
            }else{
                Consola.append(">>No se pudo encontrar el archivo o directorio "+"\n");
            }
        }else if (comando.contains("boroa create")) {
            if (piezas_comando.length >= 3) {
                if (existe_U(piezas_comando[2])) {
                    Consola.append(">>Ya existe este Usuario"+"\n");
                }else{
                    Usuarios.add(new Home(piezas_comando[2]));
                    Consola.append(comando+"\n");
                }
            }else{
                Consola.append(">>Comando ingresado Incorrectamente"+"\n");
            }
        }else if (comando.contains("boroa chnge")) {
            if (piezas_comando.length >= 3) {
                if (existe_UsuarioIndex(piezas_comando[2]) == -1) {
                    Consola.append(">>No existe ese usuario"+"\n");
                }else{
                    index_global = existe_UsuarioIndex(piezas_comando[2]);
                    llenar_label(index_global);
                    Consola.append(comando+"\n");
                }
            }else{
                Consola.append(">>Comando ingresado Incorrectamente"+"\n");
            }
        }else{
            Consola.append(">>Siquiera que tratabas de escribir?"+"\n");
        }
    }//GEN-LAST:event_BEnterActionPerformed
    public static boolean existe_arc(String nuevo, ArrayList <Creacion> temp){
        boolean salida = false;
        for (int i = 0; i < temp.size(); i++) {
            if (nuevo.equalsIgnoreCase(temp.get(i).getNombre())) {
                salida = true;
                break;
            }
        }
        return salida;
    }
    public static int index_rm(String nuevo, ArrayList <String> temp){
        int index = -1;
        for (int i = 0; i < temp.size(); i++) {
            if (nuevo.equalsIgnoreCase(temp.get(i))) {
                index = i;
                break;
            }
        }
        return index;
    }
    
    public void llenado_comboBox(){
        Directorios.removeAllItems();
        DefaultComboBoxModel ComboBox = (DefaultComboBoxModel) Directorios.getModel();
        ComboBox.addElement("Home");
        for (int j = 0; j < Usuarios.get(index_global).getArchivoYDirectorios().size(); j++) {
            ComboBox.addElement(Usuarios.get(index_global).getArchivoYDirectorios().get(j));
        }
        Directorios.setModel(ComboBox);
    }
    public boolean existe_U(String nombre){
        boolean salida = false;
        for (int i = 0; i < Usuarios.size(); i++) {
            Home actual = Usuarios.get(i);
            if (actual.getNombre().equalsIgnoreCase(nombre)) {
                salida = true;
                break;
            }
        }
        
        return salida;
    }
    public int existe_UsuarioIndex(String nombre){
        int salida = -1;
        for (int i = 0; i < Usuarios.size(); i++) {
            Home actual = Usuarios.get(i);
            if (actual.getNombre().equalsIgnoreCase(nombre)) {
                salida = i;
                break;
            }
        }
        
        return salida;
    }
    public void llenar_label(int index){
        Home actual = Usuarios.get(index);
        Root.setText(">"+actual.getNombre());
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarcoTodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarcoTodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarcoTodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarcoTodo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MarcoTodo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BEnter;
    private javax.swing.JTextField Comando;
    private javax.swing.JTextArea Consola;
    private javax.swing.JComboBox<String> Directorios;
    private javax.swing.JLabel Root;
    private javax.swing.JButton Visualize;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
